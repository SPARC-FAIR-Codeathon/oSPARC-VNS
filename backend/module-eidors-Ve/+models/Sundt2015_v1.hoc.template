/*--------------------------------------------------------------------

10/2019		Calvin Eiber

SIMULATION OF PNS UNMYELINATED FIBRE.

>>>> from Danielle Sundt et al 2015

----------------------------------------------------------------------*/

// Read in voltages in each axon segment
strdef cache_path
cache_path = "$CACHEPATH"
load_file("./+models/import_Ve_data.hoc")
import_fields(1,$thread)

// Fiber diameter (generate at template formation)
fiberDiam=$fibreDiam

// The number of nodes (generate at template formation)
axonnodes=$nNodes

load_file("noload.hoc")

proc model_globels() {
	celsius=37	//degrees C//	// Human body temperature
 	v_init=-60  //mV//          // starting voltage

	dt=0.01   //ms//            // time step
	tstop=$simDuration  //ms//           // time at which simulation terminates
	// node_volt //mV//            // voltage profile in the node from SIM4LIFE
	// fiberDiam //um//            // Diameter of the axon fiber


// electrical parameters //
    rhoa=1e6 * $p_rhoA // Ohm-um // axoplasmic resistivity
    // Sundt uses 1e6, Gaines uses 0.7e6

// Physiology parameters //
	KCNQ = .0004 * $p_gKCNQ // kcnq channel density S/cm2
	NAV = .04 	 * $p_gNaV  // Na channel density
	KV = .04 	 * $p_gKV   // K channel density
}

model_globels()

objectvar stim, axon
create node[axonnodes]
access node[0]	//APD

axon = new List()

proc initialize(){

	// print nl
	// print fiberDiam
	// print axonD
	// print paraD2
	// print paraD1

	forall insert extracellular // initialize extracellular voltage source
	forall e_extracellular = 0  // set extracellular voltage source to ground

    axon.append(new List()) // NODE list
	for i=0,axonnodes-1 {

		node[i]{
			nseg = 1
			diam = fiberDiam
			L    = $nodeLength // 10 um nominally

	        insert nahh
	        gnabar_nahh = NAV
	        mshift_nahh = -6 * $p_NaVshift // NaV1.7/1.8 channelshift
 	        hshift_nahh =  6 * $p_NaVshift // NaV1.7/1.8 channelshift

	    	insert borgkdr		 // insert delayed rectifier K channels
			gkdrbar_borgkdr = KV // density of K channels
			ek = -90	  		 // K equilibrium potential

			insert pas			// insert leak channels
			g_pas = 1/10000		// set Rm = 10000 ohms-cm2
			v = v_init			// set Vrest

			Ra=rhoa/10000
			cm=1
			// cm=2 // this was an artifact from the MRG model?

	#IFDEF use_Sundt_KCNQ // T junction, not axon length

    	    insert iM			// add KCNQ channels to DRG sections
	        vshift_iM = -5		// Control conditions
          	gkbar_iM = KCNQ		// set KCNQ channel density
	#ENDIF
			xraxial=1e10 xg=1e10 xc=0 // default second-cable parameters
			axon.o(0).append(new SectionRef())
		}
	}

	for i=0, axonnodes-2 {
		// connect child, parent
		connect node[i+1](0), node[i](1)
	}

#IFDEF branching_axons // non-linear axon topology
	@[models.branching_axons()] // Execute models.branching_axons,
	// all relevent information passed via models.branching_axons -setup
#ENDIF

	forall { // reviewed CE 2020/11/11

		v = v_init
		finitialize(v_init) // recompute initial currents
		fcurrent()

		e_pas = v + (ina + ik)/g_pas	// calculate leak equilibrium potential
	}

	// this order is the type sequence generated by matlab
	// see +models.axon_model/make_Vfield_datfiles
	// NODE, MYSA, FLUT, STIN for MRG model, just NODE for me
}




initialize()

strdef output_file
output_file = "$CACHEPATH/NEURON_vm$thread.dat"

// it's assumed that the working directory is %BIDSROOT% /code
// the actual model code lives in %BIDSROOT% / code / +models
load_file("./+models/analysis_interface.hoc")
